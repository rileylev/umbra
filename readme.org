#+TITLE: Umbra: macros for shadowing and scope management

Shadowing variables is useful. Removing a variable from a scope can enforce desired properties of code. This example protects the loop's invariant by shadowing the loop's variable to make it ~const~ within the loop's body:
#+BEGIN_SRC cpp
for(int i = 0; i < len, ++i) {
  auto const j = i;
  {
    int i =0;
    // Now we can't change the loop index
    if(pred(j))
      arr[j]++; //ok
    ...
    j++; //ERROR
  }
}
#+END_SRC
or, using Umbra,
#+BEGIN_SRC cpp
for(int i = 0; i < len, ++i)
  UMBRA_FREEZE(i) {
    if(pred(i))
      arr[i]++; //ok
    ...
    i++; // ERROR
    ...
  }
#+END_SRC

Accidentally shadowing can be devastating, especially with RAII types:
[[https://youtu.be/lkgszkPnV8g][From curiously recurring C++ Bugs at facebook by Louis Brandy]]
#+BEGIN_SRC cpp
std::mutex mut;
void critical_section(){
  std::unique_lock(mut);
  // this defines a default-constructed lock shadowing mut
  // the author intended to lock it
  ...
}
#+END_SRC
Here the programmer meant to lock the mutex, but actually created a default-constructed lock named ~mut~. Bugs like this are hard for humans to catch, but easy for machines: ~Wshadow~ would catch it.

So turn on ~-Wshadow~ and ~-Werror~. When you truly do want to shadow one variable, turn off shadow warnings locally. Enter ~UMBRA_IGNORE_SHADOW~:
#+BEGIN_SRC cpp
int x = 1;
{
  std::string x; // ERROR!
  UMBRA_IGNORE_SHADOW(
    char x = '\0'; // OK!
  )
}
#+END_SRC
or ~UMBRA_SHADOW~ for a little more syntactic sugar:
#+BEGIN_SRC cpp
int x = 1;
{
  UMBRA_SHADOW(char x = '\0'){ // Ok!
    ...
  }
}
#+END_SRC

Ban uses of an identifier within a scope using ~UMBRA_POISON~:
#+BEGIN_SRC cpp
UMBRA_POISON(dont_access_me) {
  auto x = dont_access_me; // deprecated: "poisoned by UMBRA_POISON":
}
#+END_SRC

Shadowing, specifically rebinding, serves as a restricted form of assignment. And it's purely functional. For example, you often need to perform one or two operations to fixup an input that would otherwise be const.
#+BEGIN_SRC cpp
auto purely_functional_thing(int input){
  auto const input = fixup(input))
  // this doesn't actually work because the
  // scoping rules are wonky
}
#+END_SRC
Because C++ has wonky scoping rules, you need a temporary
#+BEGIN_SRC cpp
auto purely_functional_thing(int input){
  auto const tmp = input;
  {
    auto const input = fixup(input))
  }
}
#+END_SRC
which is encapsulated in ~UMBRA_REBIND~
#+BEGIN_SRC cpp
auto purely_functional_thing(int input){
  UMBRA_REBIND(auto const, input, fixup(input)) {
    ...
  }
}
#+END_SRC
